1. Docker 시스템 정보

    docker version: Docker 클라이언트와 서버의 버전 정보 확인
    docker info: Docker 시스템 전체 정보 출력 (엔진 상태, 플러그인 등)
    docker system df: Docker 디스크 사용량 확인
    docker system prune: 사용하지 않는 데이터(중지된 컨테이너, 네트워크, 이미지 등) 삭제

2. 이미지 관리

    docker pull <이미지>: Docker Hub에서 이미지를 다운로드
    docker images: 다운로드된 이미지 목록 확인
    docker build -t <이미지 이름> .: Dockerfile을 기반으로 이미지를 빌드
    docker rmi <이미지 ID>: 로컬에 저장된 이미지를 삭제
    docker image prune: 사용하지 않는 이미지를 정리

3. 컨테이너 관리

    docker run <옵션> <이미지>: 컨테이너 생성 및 실행
        예: docker run -it --name my-container ubuntu /bin/bash
        주요 옵션:
            -d: 백그라운드 실행
            -it: 터미널 연결 (대화형 모드)
            --name: 컨테이너 이름 지정
            -p <호스트 포트>:<컨테이너 포트>: 포트 매핑
            -v <호스트 디렉토리>:<컨테이너 디렉토리>: Bind Mounts
            -v <볼륨 이름>:<컨테이너 디렉토리> : named volume
    docker ps: 실행 중인 컨테이너 목록 확인
    docker ps -a: 중지된 컨테이너 포함 모든 컨테이너 목록 확인
    docker stop <컨테이너 ID>: 실행 중인 컨테이너 중지
    docker start <컨테이너 ID>: 중지된 컨테이너 재시작
    docker restart <컨테이너 ID>: 컨테이너 재시작
    docker rm <컨테이너 ID>: 중지된 컨테이너 삭제
        실행 중인 컨테이너 강제 삭제: docker rm -f <컨테이너 ID>
    docker exec -it <컨테이너 ID> /bin/bash: 실행 중인 컨테이너 내부에 접속

    docker cp : 호스트 파일을 실행중인 도커 컨테이너에, 또는 실행중인 도커 컨테이너의 파일을 호스트에 복사
    docker cp my_container:/app/data /home/user/backup
    docker cp /home/user/my_app/src my_container:/app/

// 이미지 저장 로드 - 허브를 사용 안할 때
    docker save -o [저장할_파일_이름.tar] [이미지_이름:태그]

    ex) docker save -o spring_image.tar spring:latest


    docker load -i [저장된_파일_이름.tar]

    ex) docker load -i spring_image.tar





4. 로그 및 상태 확인

    docker logs <컨테이너 ID>: 특정 컨테이너의 로그 출력
        실시간 로그 확인: docker logs -f <컨테이너 ID>
    docker inspect <컨테이너/이미지>: 상세 정보 출력
    docker stats: 실행 중인 컨테이너의 CPU, 메모리 사용량 등 리소스 통계 출력

5. 네트워크 관리

    docker network ls: Docker 네트워크 목록 확인
    docker network create <네트워크 이름>: 새로운 네트워크 생성
    docker network connect <네트워크 이름> <컨테이너 이름>: 네트워크에 컨테이너 연결
    docker network disconnect <네트워크 이름> <컨테이너 이름>: 네트워크에서 컨테이너 분리

6. 볼륨 관리

    docker volume create <볼륨 이름>: 새로운 볼륨 생성
    docker volume ls: 생성된 볼륨 목록 확인
    docker volume inspect <볼륨 이름>: 특정 볼륨의 상세 정보 확인
    docker volume rm <볼륨 이름>: 볼륨 삭제

7. 기타 유용한 명령어

    docker login: Docker Hub 로그인
    docker logout: Docker Hub 로그아웃
    docker search <이미지 이름>: Docker Hub에서 이미지 검색



